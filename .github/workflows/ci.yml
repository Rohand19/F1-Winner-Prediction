name: CI/CD Pipeline

on:
  push:
    branches: [ main ]
    tags: [ 'v*' ]
  pull_request:
    branches: [ main ]

env:
  DOCKER_IMAGE: f1predictor
  DOCKER_REGISTRY: ghcr.io/${{ github.repository_owner }}
  PYTHONPATH: ${{ github.workspace }}/src
  FASTF1_CACHE_DIR: ${{ github.workspace }}/.cache/fastf1

jobs:
  test:
    runs-on: ubuntu-latest
    timeout-minutes: 30
    strategy:
      fail-fast: false
      matrix:
        python-version: ["3.11"]

    steps:
    - name: Checkout repository
      uses: actions/checkout@v3
      with:
        fetch-depth: 0
    
    - name: Set up Python ${{ matrix.python-version }}
      id: setup-python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}
        cache: 'pip'

    - name: Verify Python installation
      run: |
        python --version
        pip --version
        if [ "${{ matrix.python-version }}" != "$(python -c 'import sys; print(".".join(map(str, sys.version_info[:2])))')" ]; then
          echo "Python version mismatch"
          exit 1
        fi
        
    - name: Cache pip packages
      id: pip-cache
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-

    - name: Cache FastF1 data
      id: fastf1-cache
      uses: actions/cache@v3
      with:
        path: .cache/fastf1
        key: ${{ runner.os }}-fastf1-${{ hashFiles('**/tests/**/*.py') }}
        restore-keys: |
          ${{ runner.os }}-fastf1-
        
    - name: Install dependencies
      id: install-deps
      run: |
        python -m pip install --upgrade pip setuptools wheel
        pip install -e ".[dev]"
        pip install black==23.12.1 isort==5.13.2 flake8==7.0.0 mypy==1.8.0
        pip freeze > installed_requirements.txt
        
    - name: Verify dependencies
      run: |
        echo "Verifying core dependencies..."
        python -c "import sys; import fastf1; import pandas; import numpy; print('Core dependencies verified'); sys.exit(0)"
        
        echo "Verifying development dependencies..."
        python -c "import pytest; import black; import isort; import flake8; import mypy; print('Dev dependencies verified'); sys.exit(0)"
        
        echo "Verifying project package..."
        python -c "import f1predictor; print('Project package verified'); sys.exit(0)"
        
    - name: Check code formatting
      id: formatting
      run: |
        echo "Running black..."
        black --check --diff src/f1predictor tests
        
        echo "Running isort..."
        isort --check-only --diff src/f1predictor tests
        
    - name: Run linting
      id: linting
      run: |
        echo "Running flake8..."
        flake8 src/f1predictor tests --count --statistics --show-source
        
        echo "Running mypy..."
        mypy src/f1predictor --pretty
        
    - name: Check dependencies for security
      id: security
      run: |
        pip install safety
        safety check
        
    - name: Run tests with coverage
      id: tests
      env:
        PYTHONPATH: ${{ github.workspace }}/src
      run: |
        echo "Running tests with coverage..."
        pytest --cov=src/f1predictor \
              --cov-report=xml \
              --cov-report=html \
              --cov-report=term-missing \
              --cov-fail-under=40 \
              -v \
              --junit-xml=test-results.xml
        
    - name: Upload coverage to Codecov
      if: always() && steps.tests.outcome == 'success'
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage.xml
        fail_ci_if_error: false
        verbose: true

    - name: Upload test results
      if: always()
      uses: actions/upload-artifact@v3
      with:
        name: pytest-results-${{ matrix.python-version }}
        path: |
          coverage.xml
          .coverage
          coverage_html/
          test-results.xml
          installed_requirements.txt

    - name: Process test results
      if: always()
      run: |
        if [ "${{ steps.tests.outcome }}" == "failure" ]; then
          echo "Tests failed. Check the test results for details."
          echo "Coverage report:"
          cat coverage.xml | grep -A 5 "<coverage"
          exit 1
        fi

  docker:
    needs: test
    runs-on: ubuntu-latest
    timeout-minutes: 20
    if: github.event_name == 'push' && (github.ref == 'refs/heads/main' || startsWith(github.ref, 'refs/tags/v'))
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v3
      with:
        fetch-depth: 0
    
    - name: Set up Docker Buildx
      id: buildx
      uses: docker/setup-buildx-action@v2
      
    - name: Verify Docker setup
      run: |
        docker version
        docker buildx version
        docker buildx ls
      
    - name: Login to GitHub Container Registry
      uses: docker/login-action@v2
      with:
        registry: ghcr.io
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}
        
    - name: Extract metadata for Docker
      id: meta
      uses: docker/metadata-action@v4
      with:
        images: ${{ env.DOCKER_REGISTRY }}/${{ env.DOCKER_IMAGE }}
        tags: |
          type=ref,event=branch
          type=ref,event=pr
          type=semver,pattern={{version}}
          type=semver,pattern={{major}}.{{minor}}
          type=sha,format=long
    
    - name: Build and push Docker image
      id: docker_build
      uses: docker/build-push-action@v4
      with:
        context: .
        push: ${{ github.event_name != 'pull_request' }}
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max
        
    - name: Test Docker image
      if: github.event_name != 'pull_request'
      run: |
        echo "Testing Docker image..."
        IMAGE_TAG=${{ fromJson(steps.meta.outputs.json).tags[0] }}
        docker pull $IMAGE_TAG
        
        echo "Testing basic functionality..."
        docker run --rm $IMAGE_TAG --help
        
    - name: Verify Docker image
      if: github.event_name != 'pull_request'
      run: |
        IMAGE_TAG=${{ fromJson(steps.meta.outputs.json).tags[0] }}
        
        echo "Verifying package installation..."
        docker run --rm $IMAGE_TAG python -c "import f1predictor; print('Package imported successfully')"
        
        echo "Verifying dependencies..."
        docker run --rm $IMAGE_TAG python -c "import fastf1; import pandas; import numpy; print('Dependencies verified')"
        
        echo "Running basic model test..."
        docker run --rm $IMAGE_TAG python -c "
        from f1predictor.models import F1ModelTrainer
        trainer = F1ModelTrainer()
        print('Model trainer initialized successfully')
        "

  deploy-docs:
    needs: [test, docker]
    runs-on: ubuntu-latest
    timeout-minutes: 15
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v3
      with:
        fetch-depth: 0
    
    - name: Set up Python
      id: setup-python
      uses: actions/setup-python@v4
      with:
        python-version: "3.11"
        cache: 'pip'
        
    - name: Install dependencies
      id: install-deps
      run: |
        python -m pip install --upgrade pip
        pip install -e ".[docs]"
        pip freeze > docs_requirements.txt
        
    - name: Build documentation
      id: build-docs
      run: |
        cd docs
        make html
        
    - name: Verify documentation build
      run: |
        echo "Checking documentation files..."
        if [ ! -f "docs/_build/html/index.html" ]; then
          echo "Documentation build failed - index.html not found"
          exit 1
        fi
        
        echo "Checking for broken links..."
        if [ -f "docs/_build/html/output.txt" ]; then
          if grep -q "broken" docs/_build/html/output.txt; then
            echo "Found broken links in documentation"
            exit 1
          fi
        fi
        
    - name: Deploy to GitHub Pages
      id: deploy
      uses: peaceiris/actions-gh-pages@v3
      with:
        github_token: ${{ secrets.GITHUB_TOKEN }}
        publish_dir: ./docs/_build/html
        
    - name: Verify deployment
      run: |
        echo "Waiting for GitHub Pages deployment..."
        sleep 30
        
        echo "Checking documentation accessibility..."
        curl -s -f -o /dev/null "https://${{ github.repository_owner }}.github.io/${{ github.event.repository.name }}/" || (
          echo "Documentation site is not accessible"
          exit 1
        )
        
        echo "Checking documentation content..."
        curl -s "https://${{ github.repository_owner }}.github.io/${{ github.event.repository.name }}/" | grep -q "F1 Race Predictor" || (
          echo "Documentation content verification failed"
          exit 1
        )

  notify:
    needs: [test, docker, deploy-docs]
    runs-on: ubuntu-latest
    if: always()
    steps:
      - name: Check workflow status
        id: check-status
        run: |
          if [[ "${{ contains(needs.*.result, 'failure') }}" == "true" ]]; then
            echo "::error::One or more jobs failed"
            echo "Test job status: ${{ needs.test.result }}"
            echo "Docker job status: ${{ needs.docker.result }}"
            echo "Docs job status: ${{ needs.deploy-docs.result }}"
            exit 1
          elif [[ "${{ contains(needs.*.result, 'cancelled') }}" == "true" ]]; then
            echo "::warning::One or more jobs were cancelled"
            exit 1
          else
            echo "All jobs completed successfully"
          fi 